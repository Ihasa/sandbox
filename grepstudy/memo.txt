--------------------------------------
grep
--------------------------------------
grepコマンドは1行単位での検索しかできない
15:00台の最初のログを見るためにgrep -E "\[14.*\n\[15" lastest.logとしてもマッチしない
VS Code等のエディタの検索機能はそのあたりよろしくやってくれるのでマッチさせられるが

-P(Perl互換の正規表現を使う)オプションを使えば改行含んだ検索できる的な記事があったけど今はできないっぽい？

なのでオプションを使ったり1行マッチさせた後にほかのコマンドにパイプして加工していくことになる

1. -A 行数, -B 行数　-C 行数
マッチした行の次の何行か(-A)、前の何行か(-B)、前後の何行か(-C)も出す
マッチしたセットは--で区切られるので、消したければgrep -v "^--$"にパイプなどする

ex:[CHAT]を含む行と、直後の1行に出ていたログを検索する
grep -E "\[CHAT\]" -A 1 latest.log

連続でマッチしていた場合は最後にマッチしたやつから数えて次の何行かを出す
こんな感じ：
[19:39:28] [Render thread/INFO]: [CHAT] スクリーンショットをファイル名2021-02-28_19.39.28.pngとして保存しました
[19:40:04] [Render thread/INFO]: [CHAT] リスポーン地点が設定されました
[19:44:22] [Server thread/INFO]: Saving and pausing game...

2. -v
invertの意
マッチしない行を出力
ex:15:00台以外に出力されたログを検索する
grep -E --color -m 1 -e "^\[15:.+\]" latest.log

3. -m 最大行数
最大行数だけマッチしたら検索を終わる
-v指定されていたら最大行数マッチしなかったら検索を終わる
ex:15:00台に出力された最初のログを検索する
grep -E -m 1 -e "^\[15:.+\]" latest.log
最後のログを検索したい場合はsedにパイプする


その他
-f ファイル
検索パターンをファイルから読む
改行コードには気を付けて(CRLFだとできなかった)

--color
環境変数GREP_COLORで指定された色でマッチ個所に色をつける

-n
(マッチした行番号):を先頭に追加して表示

-H
(検索したファイル名):を先頭に追加して表示


--------------------------------------
sed
--------------------------------------
各行について処理を実行する
sed オプション 行番号[,行番号]関数 [ファイル名]

・オプション
-n
何も指定しない場合は各行の処理結果が出力されるが、
これを指定すると出力されない

-E
grepと同じで正規表現を拡張正規表現として解釈する

-e 行番号[,行番号]関数
コマンド追加

・行番号
行番号は単純に数字で指定する
$で最終行を指定する
相対的な指定はできないっぽい
$はbashでの特殊文字なので\でエスケープするか、'で囲む

大体の関数は2個まで行番号指定できる
2個→範囲指定して処理
1個→その行だけ処理
0個→全部の行を処理

・関数
d
D
消す

p
P
標準出力に出力する
-nオプションと組み合わせるといい

!関数
行番号で指定されていない所に対して処理を実行

s/正規表現/置換式/フラグ
置き換える
特殊文字を含むことが多いので"か'で囲むべし
$,!もエスケープ必要なので注意

    置換式：
    &
    マッチした文字列全体

    \1,\2,...
    正規表現で指定した後方参照
    -Eのありなしに気を付けて

    フラグ：
    g:全部置き換え
    数字:(数字)番目にマッチしたものだけ置き換え
    p:置換した行を標準出力に出力
    w ファイル:置換した行をファイルに出力

ex:[CHAT]を含む行と、直後の1行に出ていたログを検索し、--を削除(これだと改行までは消えない、消したければ素直にgrepで)
grep -E "\[CHAT\]" -A 1 latest.log | sed s/^--\$//

ex:16:00台に出た4番目のログを検索する
grep -E -e "\[16:.*\]" latest.log | sed -n 4p
grep -E -e "\[16:.*\]" latest.log | sed 4\!d

ex:16:00台に出た4番目のログを検索する
grep -E -e "\[16:.*\]" latest.log | sed -n 4p
grep -E -e "\[16:.*\]" latest.log | sed 4\!d

ex:最初のログと最後のログだけ残す
sed -n -e 1p -e \$p latest.log

ex:6つ目のSaving chunksが行われた時刻を取得
grep -E "Saving chunks" latest.log | sed -n -E -e 's/^\[(..:..:..)\].*/\1/g' -e 6p

◆行番号取ってくる系
ex:6つ目のSaving chunksの後の3つのログを取得
LINE_BEGIN=`grep -n -E "Saving chunks" latest.log | sed -E -e s/:.*// -n -e 6p` #6つ目のSaving chunksの行番号を取得
sed -n ${LINE_BEGIN},$((${LINE_BEGIN}+3))p latest.log #6つ目のSaving chunksの行とその後ろの3行分を出力

ex:5つ目のSaving chunksより前のログを削除
LINE_BEGIN=`grep -E -n "Saving chunk" latest.log | sed -E -e s/:.*// -n -e 5p`
sed -n "${LINE_BEGIN},\$p" latest.log

ex:最初に見つかった17:00台のSaving chunksから最後の19:00台のSaving chunksまでを出力
※普通にgrepだけでできそうだが最初と最後の指定がgrepだけでできるのかどうか・・・？
　あと``より$()のほうが間違えづらい　``だと$のエスケープで\\$としないといけなかったりするので
　$(())は計算式なので別物
LINE_BEGIN=`grep -n "^\[17.*Saving chunks" -m 1 latest.log | sed s/:.*//`
LINE_END=`grep -n "^\[19.*Saving chunks" latest.log | sed -e s/:.*// -n -e \\$p`
sed -n ${LINE_BEGIN},${LINE_END}p latest.log

◆grep -A の結果を加工する
ex:15,17,19時台のログだけ検索して分割
grep "^\[1[579]:" -C 0 latest.log > log151719.txt #さすがに別ファイルへ出力しておく
./sep--.sh
